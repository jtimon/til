mode lib

import("src/core/constants")

Dynamic := struct {} // For dynamic arguments not checked at type checking phase

// DivideByZero := struct {} // REM Apparently Roc tried this and rolled it back

I64_OverflowError := struct {
    msg: Str = ""

    new := func(msg: Str) returns I64_OverflowError {
        err := I64_OverflowError()
        err.msg = msg
        return err
    }
}

U8_OverflowError := struct {
    msg: Str = ""

    new := func(msg: Str) returns U8_OverflowError {
        err := U8_OverflowError()
        err.msg = msg
        return err
    }
}

IndexOutOfBoundsError := struct {
    msg: Str = ""

    new := func(msg: Str) returns IndexOutOfBoundsError {
        err := IndexOutOfBoundsError()
        err.msg = msg
        return err
    }
}

FullError := struct {
    msg: Str = ""

    new := func(msg: Str) returns FullError {
        err := FullError()
        err.msg = msg
        return err
    }
}

// TODO check for undefined types in catch
AllocError := struct {
    msg: Str = ""

    new := func(msg: Str) returns AllocError {
        err := AllocError()
        err.msg = msg
        return err
    }
}

// FIX not properly working for errors in imports, says the right pos in the importing file instead of the source one
loc := ext_func() returns Str; // Returns the current source location as "<file>:<line>:<col>:"

// Comparisons are hateful, plus two of them are probably enough for now:
lt        := ext_func(a: I64, b: I64) returns Bool;
gt        := ext_func(a: I64, b: I64) returns Bool;

// Minimal arithmehics are fair and necessary
add       := ext_func(a: I64, b: I64) returns I64;
sub       := ext_func(a: I64, b: I64) returns I64;
mul       := ext_func(a: I64, b: I64) returns I64;
div       := ext_func(a: I64, b: I64) returns I64;
mod       := ext_func(a: I64, b: I64) returns I64;

single_print := ext_proc(args: ..Str);
// TODO temporary optimization since things are really slow since we have so many Array implementations here (loaded and checked with each test)
print_flush  := ext_proc();
exit         := ext_func(code: I64);
// TODO parse with dots like other languages, then change the direction of the slash depending on the os
// TODO use imports in declarations:
// example_cil: my_matrix_def := import(matrix.matrix_def)
// example_cil: my_matrix : struct = import(matrix)
// example_python: from matrix import matrix_def as my_matrix_def
import       := ext_proc(path: Str);

// Memory operations
NULL   := 0
size_of := ext_func(type: Dynamic) returns I64;
to_ptr := ext_func(var_identifier: Dynamic) returns I64;
type_as_str := ext_func(type: Dynamic) returns Str;
// TODO Use throws for memory operations, don't return 0 from malloc
malloc := ext_func(size: I64) returns I64 throws AllocError;
free   := ext_func(ptr: I64);
memcpy := ext_func(dest: I64, src: I64, size: I64);
memset := ext_func(dest: I64, value: U8, size: I64);

print := proc(args: ..Str) {
    for i in 0..args.len {
        single_print(args.get(i))
    }
    print_flush()
}

println := proc(args: ..Str) {
    for i in 0..args.len {
        single_print(args.get(i))
    }
    single_print("\n")
    print_flush()
}

panic := proc(loc_str: Str, msg: Str) {
    println(loc_str.format(msg))
    exit(1)
}

Ptr := struct {
    mut data: I64 = NULL

    // TODO FIX should type error because size is already declared
    size_of := func() returns I64 { return size_of(I64) }

    new_by_size := proc(size: I64) returns Ptr throws AllocError {
        mut p := Ptr()
        p.data = malloc(size)
        if NULL.eq(p.data) {
            throw AllocError.new(format(loc(), "Ptr.new: failed to allocate ", size.to_str(), " bytes"))
        }
        return p
    }

    new := proc(T: Dynamic) returns Ptr throws AllocError {
        return Ptr.new_by_size(size_of(T))
    }

    delete := proc(self: Ptr) throws AllocError {
        if NULL.eq(self.data) {
            throw AllocError.new(format(loc(), "Ptr.free: trying to free a NULL pointer"))
        }
        free(self.data)
    }

    /** Ptr.offset is danger-ous, also known as "pointer arythmetics" */
    offset := proc(self: Ptr, offset: I64) returns Ptr {
        mut p := Ptr()
        p.data = add(self.data, offset)
        return p
    }

    // cast := macro(self: Ptr, type_name: Str) returns Dynamic {
    //     // TODO: This cast is purely cosmetic for now.
    //     // Proper type-changing macros are not implemented yet.
    //     return self
    // }

    copy_from := proc(self: Ptr, src: Ptr, size: I64) {
        memcpy(self.data, src.data, size)
    }

    copy_to := proc(self: Ptr, mut dest: Ptr, size: I64) {
        memcpy(dest.data, self.data, size)
    }

    set_zero := proc(mut self: Ptr, size: I64) {
        memset(self.data, U8.from_i64(0), size)
    }
}

not := func(b: Bool) returns Bool {
    if b {
        return false
    }
    return true
}

or := func(args: ..Bool) returns Bool {
    for i in 0..args.len {
        if args.get(i) {
            return true
        }
    }
    return false
    catch(err: Str) {
        // This should never happen anyway
    }
}

and := func(args: ..Bool) returns Bool {
    for i in 0..args.len {
        if not(args.get(i)) {
            return false
        }
    }
    return true
}

Bool := struct {
    mut data: U8 = 0

    len := func(self: Bool) returns I64 {
        return 1
    }

    eq := func(a: Bool, b: Bool) returns Bool {
        return or(and(a, b), and(not(b), not(a)))
    }

    to_str := func(self: Bool) returns Str {
        if self {
            return "true"
        }
        return "false"
    }

    // necessary for branchless arithmetics (but it must be implemented as a cast for it to make sense that way)
    to_i64 := func(self: Bool) returns I64 {
        if self {
            return 1
        }
        return 0
    }

    to_u8 := func(self: Bool) returns U8 {
        return self.data
    }

    from_i64 := func(i: I64) returns Bool { // TODO support regular struct returns to be able to this as a regular struct internally (except for if/while conditions)
        mut b := Bool()
        if gt(i, 0) {
            b.data = 1
        }
        return b
    }
}
false := Bool.from_i64(0)
// true := Bool.from_i64(1) // TODO stop using "true" as literal

lteq := func(a: I64, b: I64) returns Bool {
    if lt(a, b) {
        return true
    }
    if a.eq(b) {
        return true
    }
    return false
}

gteq := func(a: I64, b: I64) returns Bool {
    if gt(a, b) {
        return true
    }
    if a.eq(b) {
        return true
    }
    return false
}

// Note that I64 and U8 don't have fields because the're the "real core types"
// think of them as "half-external types" for now
U8 := struct {
    // TODO FIX can't use itself as base data, can it?
    // TODO This is the base of data storage, not I64
    // mut data: I8 = 0

    len := func(self: I64) returns I64 {
        return 1
    }

    eq := func(self: U8, other: U8) returns Bool {
        return I64.eq(U8.to_i64(self), U8.to_i64(other))
    }

    to_i64 := func(self: U8) returns I64 {
        // return cast("I64", self) // TODO implement cast, start easy with U8 to I64
        u8_to_i64 := ext_func(u8: U8) returns I64;
        return u8_to_i64(self)
    }

    // TODO do the rest of the operations, first fake them with i64, until real compilation
    // TODO rename add into i64_add or something
    // TODO rename add into I64.add directly in the rust/interpreter side, afterwards
    u8_add := func(a: U8, b: U8) returns U8 throws U8_OverflowError {
        return U8.from_i64(add(a.to_i64(), b.to_i64()))
    }

    from_i64 := func(self: I64) returns U8 throws U8_OverflowError {
        if lt(self, 0) {
            throw U8_OverflowError.new(format(loc(), "Negative values cannot be cast into 'U8'"))
        }
        if gt(self, MAX_U8) {
            throw U8_OverflowError.new(format(loc(), "U8: cannot be casted from an I64 greater than: ", I64.to_str(MAX_U8)))
        }
        i64_to_u8 := ext_func(i64: I64) returns U8;
        return i64_to_u8(self)
    }

    to_str := func(self: U8) returns Str {
        return I64.to_str(U8.to_i64(self))
    }
}

I64 := struct {
    // mut data : U8Array = U8Array.new(8) // TODO Use [8]U8 for this one

    eq := func(a: I64, b: I64) returns Bool {
        // REM We can't use the variadic or from here without mutual recusrion and a stack overflow
        if gt(a, b) {
            return false
        }
        if gt(b, a) {
            return false
        }
        if lt(a, b) {
            return false
        }
        if lt(b, a) {
            return false
        }
        return true
    }

    to_str := func(self: I64) returns Str {
        i64_to_str := ext_func(a: I64) returns Str;
        return i64_to_str(self)
    }

    from_str := func(str: Str) returns I64 {
        str_to_i64 := ext_func(a: Str) returns I64;
        return str_to_i64(str) // TODO: this can fail and panic from rust
    }

    inc := proc(mut self: I64) {
        self = add(self, 1)
    }

    dec := proc(mut self: I64) {
        self = sub(self, 1)
    }

    // TODO: implement operators and allow operator overload
    __add__ := func(self: I64, other: I64) returns I64 {
        return add(self, other)
    }
}

// TODO get rid of special cases for Str besides literals
Str := struct {
    mut c_string : I64 = 0
    mut cap      : I64 = 0
    // mut len : I64 = 0 // TODO make sure double declarations inside the same struct give type errors

    len := func(self: Str) returns I64 {
        return self.cap
    }

    eq := func(self: Str, other: Str) returns Bool {
        if not(I64.eq(self.cap, other.cap)) {
            return false
        }

        for i in 0..self.cap {
            mut self_byte  : U8 = 0
            mut other_byte : U8 = 0
            memcpy(to_ptr(self_byte), add(self.c_string, i), 1)
            memcpy(to_ptr(other_byte), add(other.c_string, i), 1)

            if not(U8.eq(self_byte, other_byte)) {
                return false
            }
        }

        return true
    }

    to_i64 := func(self: Str) returns I64 {
        return I64.from_str(self)
    }
}

get_substr := func(s: Str, start: I64, end: I64) returns Str throws IndexOutOfBoundsError, AllocError {

    if start.lt(0) {
        throw IndexOutOfBoundsError.new(format(loc(), "get_substr: start index ", start.to_str(), " cannot be negative"))
    }
    if end.lt(0) {
        throw IndexOutOfBoundsError.new(format(loc(), "get_substr: end index ", end.to_str(), " cannot be negative"))
    }
    if start.gt(end) {
        throw IndexOutOfBoundsError.new(format(loc(), "get_substr: start index ", start.to_str(), " is greater than end index ", end.to_str()))
    }
    if end.gt(s.len()) {
        throw IndexOutOfBoundsError.new(format(loc(), "get_substr: end index ", end.to_str(), " is greater than string length ", I64.to_str(s.len())))
    }
    if start.eq(end) {
        throw IndexOutOfBoundsError.new(format(loc(), "get_substr: start and end are the same (", start.to_str(), "), no substring"))
    }

    mut substr := Str()
    substr.cap = end.sub(start)
    substr.c_string = malloc(substr.cap)
    if NULL.eq(substr.c_string) {
        throw AllocError.new(format(loc(), "Str.get_substr: failed to allocate ", I64.to_str(substr.cap), " bytes"))
    }
    memcpy(substr.c_string, add(s.c_string, start), substr.cap)

    return substr
}

get_char := func(s: Str, pos: I64) returns Str throws IndexOutOfBoundsError, AllocError {
    return s.get_substr(pos, add(pos, 1))
}

format := func(prefix: Str, args: ..Str) returns Str throws I64_OverflowError, IndexOutOfBoundsError, AllocError {
    mut result := Str()
    result.cap = prefix.cap

    for i in 0..args.len {
        arg := args.get(i)
        result.cap = add(result.cap, arg.cap)
        if lt(result.cap, arg.cap) {
            throw I64_OverflowError.new(format(loc(), "format: integer overflow while summing cap for arg ", i.to_str()))
        }
    }

    result.c_string = malloc(result.cap)
    if NULL.eq(result.c_string) {
        throw AllocError.new(format(loc(), "format: malloc failed for cap = ", I64.to_str(result.cap)))
    }

    mut offset := 0
    memcpy(result.c_string, prefix.c_string, prefix.cap)
    offset = prefix.cap

    for i in 0..args.len {
        mut s := args.get(i)
        memcpy(add(result.c_string, offset), s.c_string, s.cap)
        offset = add(offset, s.cap)
    }

    return result
}

U8Array := struct {
    mut ptr      : I64  = 0     // Pointer to the data buffer
    mut len      : I64  = 0     // Current number of elements
    mut cap      : I64  = 0     // Allocated capacity
    mut is_dyn   : Bool = false // Whether this array is dynamic (can grow)

    INIT_DYN_CAP : I64  = 32
    MAX_CAP      : I64  = 1024

    new := proc(capacity: I64) returns U8Array {
        mut arr := U8Array()
        arr.cap = capacity
        arr.ptr = malloc(arr.cap)
        memset(arr.ptr, U8.from_i64(0), arr.cap) // Zeroing by default
        arr.is_dyn = false
        arr.len = arr.cap
        return arr
    }

    new_dyn := proc() returns U8Array {
        mut arr := U8Array()
        arr.cap = U8Array.INIT_DYN_CAP
        arr.ptr = malloc(arr.cap)
        memset(arr.ptr, U8.from_i64(0), arr.cap) // Zeroing by default
        arr.is_dyn = true
        arr.len = 0
        return arr
    }

    push := proc(mut self: U8Array, value: U8) throws FullError, Str {
        if not(self.is_dyn) {
            throw format(loc(), "U8Array.push: push is not allowed for static arrays")
        }

        if I64.eq(self.len, self.cap) {
            new_cap := mul(self.cap, 2)
            if gt(new_cap, U8Array.MAX_CAP) {
                throw FullError.new(format(loc(), "U8Array.push: capacity exceeded U8Array.MAX_CAP"))
            }

            new_ptr := malloc(new_cap)
            memcpy(new_ptr, self.ptr, self.len)
            free(self.ptr)
            self.ptr = new_ptr
            self.cap = new_cap
        }

        mut dest := add(self.ptr, self.len)
        memcpy(dest, to_ptr(value), 1)
        self.len = add(self.len, 1)
    }

    get := func(self: U8Array, index: I64) returns U8 throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "U8Array.get: index out of bounds"))
        }

        mut src := add(self.ptr, index)
        mut value : U8 = 0
        memcpy(to_ptr(value), src, 1)
        return value
    }

    set := proc(mut self: U8Array, index: I64, value: U8) throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "U8Array.set: index out of bounds"))
        }
        mut dest := add(self.ptr, index)
        memcpy(dest, to_ptr(value), 1)
    }

    delete := proc(mut self: U8Array) {
        free(self.ptr)
        self.ptr = 0
        self.len = 0
        self.cap = 0
        self.is_dyn = false
    }
}

StrArray := struct {
    mut ptr      : I64  = 0     // Pointer to the data buffer
    mut len      : I64  = 0     // Current number of elements
    mut cap      : I64  = 0     // Allocated capacity
    mut is_dyn   : Bool = false // Whether this array is dynamic

    INIT_DYN_CAP : I64  = 16
    MAX_CAP      : I64  = 512

    new := proc(capacity: I64) returns StrArray {
        mut arr := StrArray()
        size_bytes := mul(capacity, size_of(Str))
        arr.ptr = malloc(size_bytes)
        memset(arr.ptr, 0, size_bytes)
        arr.len = capacity
        arr.cap = capacity
        arr.is_dyn = false
        return arr
    }

    new_dyn := proc() returns StrArray {
        mut arr := StrArray()
        size_bytes := mul(StrArray.INIT_DYN_CAP, size_of(Str))
        arr.ptr = malloc(size_bytes)
        memset(arr.ptr, 0, size_bytes)
        arr.len = 0
        arr.cap = StrArray.INIT_DYN_CAP
        arr.is_dyn = true
        return arr
    }

    push := proc(mut self: StrArray, value: Str) throws FullError, Str {
        if not(self.is_dyn) {
            throw format(loc(), "StrArray.push: push is not allowed for static arrays")
        }

        if I64.eq(self.len, self.cap) {
            new_cap := mul(self.cap, 2)
            if gt(new_cap, StrArray.MAX_CAP) {
                throw FullError.new(format(loc(), "StrArray.push: capacity exceeded StrArray.MAX_CAP"))
            }

            new_ptr := malloc(mul(new_cap, size_of(Str)))
            memcpy(new_ptr, self.ptr, mul(self.len, size_of(Str)))
            free(self.ptr)
            self.ptr = new_ptr
            self.cap = new_cap
        }

        dest := add(self.ptr, mul(self.len, size_of(Str)))
        memcpy(dest, to_ptr(value), size_of(Str))
        self.len = add(self.len, 1)
    }

    get := func(self: StrArray, index: I64) returns Str throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "StrArray.get: index out of bounds"))
        }

        src := add(self.ptr, mul(index, size_of(Str)))
        mut value : Str = ""
        memcpy(to_ptr(value), src, size_of(Str))
        return value
    }

    set := proc(mut self: StrArray, index: I64, value: Str) throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "StrArray.set: index out of bounds"))
        }

        dest := add(self.ptr, mul(index, size_of(Str)))
        memcpy(dest, to_ptr(value), size_of(Str))
    }

    delete := proc(mut self: StrArray) {
        free(self.ptr)
        self.ptr = 0
        self.len = 0
        self.cap = 0
        self.is_dyn = false
    }
}

BoolArray := struct {
    mut ptr      : I64  = 0     // Pointer to the data buffer
    mut len      : I64  = 0     // Current number of elements
    mut cap      : I64  = 0     // Allocated capacity
    mut is_dyn   : Bool = false // Whether this array is dynamic

    INIT_DYN_CAP : I64  = 16
    MAX_CAP      : I64  = 512

    new := proc(capacity: I64) returns BoolArray {
        mut arr := BoolArray()
        size_bytes := mul(capacity, size_of(Bool))
        arr.ptr = malloc(size_bytes)
        memset(arr.ptr, 0, size_bytes)
        arr.len = capacity
        arr.cap = capacity
        arr.is_dyn = false
        return arr
    }

    new_dyn := proc() returns BoolArray {
        mut arr := BoolArray()
        size_bytes := mul(BoolArray.INIT_DYN_CAP, size_of(Bool))
        arr.ptr = malloc(size_bytes)
        memset(arr.ptr, 0, size_bytes)
        arr.len = 0
        arr.cap = BoolArray.INIT_DYN_CAP
        arr.is_dyn = true
        return arr
    }

    push := proc(mut self: BoolArray, value: Bool) throws FullError, Str {
        if not(self.is_dyn) {
            throw format(loc(), "BoolArray.push: push is not allowed for static arrays")
        }

        if I64.eq(self.len, self.cap) {
            new_cap := mul(self.cap, 2)
            if gt(new_cap, BoolArray.MAX_CAP) {
                throw FullError.new(format(loc(), "BoolArray.push: capacity exceeded BoolArray.MAX_CAP"))
            }

            new_ptr := malloc(mul(new_cap, size_of(Bool)))
            memcpy(new_ptr, self.ptr, mul(self.len, size_of(Bool)))
            free(self.ptr)
            self.ptr = new_ptr
            self.cap = new_cap
        }

        dest := add(self.ptr, mul(self.len, size_of(Bool)))
        memcpy(dest, to_ptr(value), size_of(Bool))
        self.len = add(self.len, 1)
    }

    get := func(self: BoolArray, index: I64) returns Bool throws Str {
        if gteq(index, self.len) {
            throw format(loc(), "BoolArray.get: index out of bounds")
        }

        src := add(self.ptr, mul(index, size_of(Bool)))
        mut value : Bool = false
        memcpy(to_ptr(value), src, size_of(Bool))
        return value
    }

    set := proc(mut self: BoolArray, index: I64, value: Bool) throws Str {
        if gteq(index, self.len) {
            throw format(loc(), "BoolArray.set: index out of bounds")
        }

        dest := add(self.ptr, mul(index, size_of(Bool)))
        memcpy(dest, to_ptr(value), size_of(Bool))
    }

    delete := proc(mut self: BoolArray) {
        free(self.ptr)
        self.ptr = 0
        self.len = 0
        self.cap = 0
        self.is_dyn = false
    }
}

I64Array := struct {
    mut ptr      : I64  = 0     // Pointer to the data buffer
    mut len      : I64  = 0     // Current number of elements
    mut cap      : I64  = 0     // Allocated capacity
    mut is_dyn   : Bool = false // Whether this array is dynamic

    INIT_DYN_CAP : I64  = 16
    MAX_CAP      : I64  = 512

    new := proc(capacity: I64) returns I64Array {
        mut arr := I64Array()
        size_bytes := mul(capacity, size_of(I64))
        arr.ptr = malloc(size_bytes)
        memset(arr.ptr, 0, size_bytes)
        arr.len = capacity
        arr.cap = capacity
        arr.is_dyn = false
        return arr
    }

    new_dyn := proc() returns I64Array {
        mut arr := I64Array()
        size_bytes := mul(I64Array.INIT_DYN_CAP, size_of(I64))
        arr.ptr = malloc(size_bytes)
        memset(arr.ptr, 0, size_bytes)
        arr.len = 0
        arr.cap = I64Array.INIT_DYN_CAP
        arr.is_dyn = true
        return arr
    }

    push := proc(mut self: I64Array, value: I64) throws FullError, Str {
        if not(self.is_dyn) {
            throw format(loc(), "I64Array.push: push is not allowed for static arrays")
        }

        if I64.eq(self.len, self.cap) {
            new_cap := mul(self.cap, 2)
            if gt(new_cap, I64Array.MAX_CAP) {
                throw FullError.new(format(loc(), "I64Array.push: capacity exceeded I64Array.MAX_CAP"))
            }

            new_ptr := malloc(mul(new_cap, size_of(I64)))
            memcpy(new_ptr, self.ptr, mul(self.len, size_of(I64)))
            free(self.ptr)
            self.ptr = new_ptr
            self.cap = new_cap
        }

        dest := add(self.ptr, mul(self.len, size_of(I64)))
        memcpy(dest, to_ptr(value), size_of(I64))
        self.len = add(self.len, 1)
    }

    get := func(self: I64Array, index: I64) returns I64 throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "I64Array.get: index out of bounds"))
        }

        src := add(self.ptr, mul(index, size_of(I64)))
        mut value : I64 = 0
        memcpy(to_ptr(value), src, size_of(I64))
        return value
    }

    set := proc(mut self: I64Array, index: I64, value: I64) throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "I64Array.set: index out of bounds"))
        }

        dest := add(self.ptr, mul(index, size_of(I64)))
        memcpy(dest, to_ptr(value), size_of(I64))
    }

    delete := proc(mut self: I64Array) {
        free(self.ptr)
        self.ptr = 0
        self.len = 0
        self.cap = 0
        self.is_dyn = false
    }
}

Array := struct {
    mut type_name : Str  = ""
    mut type_size : I64  = 0
    mut ptr       : I64  = 0
    mut len       : I64  = 0
    mut cap       : I64  = 0
    mut is_dyn    : Bool = false

    INIT_DYN_CAP : I64 = 16
    MAX_CAP      : I64 = 1024

    new := proc(T_str: Str, type_size: I64, capacity: I64) returns Array {
        mut arr := Array()
        // arr.type_name = type_as_str(T) // TODO allow Dynamic for types too, or implement Type
        // arr.type_size = size_of(T)
        arr.type_name = T_str
        arr.type_size = type_size
        size_bytes := mul(capacity, arr.type_size)
        arr.ptr = malloc(size_bytes)
        memset(arr.ptr, 0, size_bytes)
        arr.len = capacity
        arr.cap = capacity
        arr.is_dyn = false
        return arr
    }

    new_dyn := proc(T_str: Str, type_size: I64) returns Array {
        mut arr := Array()
        arr.type_name = T_str
        arr.type_size = type_size
        size_bytes := mul(Array.INIT_DYN_CAP, arr.type_size)
        arr.ptr = malloc(size_bytes)
        arr.len = 0
        arr.cap = Array.INIT_DYN_CAP
        arr.is_dyn = true
        return arr
    }

    push := proc(mut self: Array, value: Dynamic) throws FullError, Str {
        if not(self.is_dyn) {
            throw format(loc(), "Array.push: push is not allowed for static arrays")
        }

        // if not(Str.eq(type_as_str(type_of(value)), self.type_name)) { // TODO FIX
        //     throw format(loc(), "Array.push: value type mismatch")
        // }

        if I64.eq(self.len, self.cap) {
            new_cap := mul(self.cap, 2)
            if gt(new_cap, Array.MAX_CAP) {
                throw FullError.new(format(loc(), "Array.push: capacity exceeded Array.MAX_CAP"))
            }

            new_ptr := malloc(mul(new_cap, self.type_size))
            memcpy(new_ptr, self.ptr, mul(self.len, self.type_size))
            free(self.ptr)
            self.ptr = new_ptr
            self.cap = new_cap
        }

        dest := add(self.ptr, mul(self.len, self.type_size))
        memcpy(dest, to_ptr(value), self.type_size)
        self.len = add(self.len, 1)
    }

    get := proc(self: Array, index: I64, mut T: Dynamic) throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "Array.get: index out of bounds"))
        }

        // if not(Str.eq(type_as_str(T), self.type_name)) { // TODO FIX
        //     throw format(loc(), format("Array.get: destination type mismatch: expected '", self.type_name, "' found '", type_as_str(T), "'"))
        // }

        src := add(self.ptr, mul(index, self.type_size))
        memcpy(to_ptr(T), src, self.type_size)
    }

    set := proc(mut self: Array, index: I64, value: Dynamic) throws IndexOutOfBoundsError {
        if gteq(index, self.len) {
            throw IndexOutOfBoundsError.new(format(loc(), "Array.set: index out of bounds"))
        }

        // if not(Str.eq(type_as_str(type_of(value)), self.type_name)) { // TODO FIX
        //     throw format(loc(), "Array.set: value type mismatch")
        // }

        dest := add(self.ptr, mul(index, self.type_size))
        memcpy(dest, to_ptr(value), self.type_size)
    }

    delete := proc(mut self: Array) {
        free(self.ptr)
        self.ptr = 0
        self.len = 0
        self.cap = 0
        self.is_dyn = false
    }
}
